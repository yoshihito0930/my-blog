---
import type { CollectionEntry } from "astro:content";
import { getTagMap } from "../content/utils";
import Tag from "../components/Tag.astro"
import { Image } from "astro:assets";

const tagMap = await getTagMap();

interface Props {
  posts: CollectionEntry<"posts">[];
}

const { posts } = Astro.props;
---
<section class="post-grid">
  {posts.map(post => (
    <article class="post-card">
      <a href={`/posts/${post.slug}`} class="post-link">
        <div class="post-thumbnail">
          {post.data.image ? (
            <img 
              src={post.data.image}
              alt={post.data.title}
              loading="lazy"
            />
          ) : (
            <div class="post-thumbnail-placeholder"></div>
          )}
        </div>
        
        <div class="post-content">
          <div class="post-meta">
            <time datetime={post.data.publishedAt.toString()} class="post-date">
              {new Date(post.data.publishedAt).toLocaleDateString('ja-JP', { 
                year: 'numeric',
                month: '2-digit', 
                day: '2-digit' 
              })}
            </time>
          </div>
          
          <h2 class="post-title">{post.data.title}</h2>
          
          <div class="post-tags">
            {post.data.tags.map(tag => (
              <Tag name={tag} href={`/tags/${tag}`} focused={false} />
            ))}
          </div>
        </div>
      </a>
    </article>
  ))}
</section>

<style>
  /* グリッドレイアウト - 4行×3列 */
  .post-grid {
    display: grid;
    gap: var(--spacing-md);
    grid-template-columns: repeat(1, 1fr);
  }
  
  /* タブレット - 2列 */
  @media (min-width: 768px) {
    .post-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  /* デスクトップ - 3列 */
  @media (min-width: 1024px) {
    .post-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  
  .post-card {
    background: var(--color-bg-card);
    border-radius: var(--border-radius-md);
    overflow: hidden;
    box-shadow: var(--shadow-sm);
    transition: transform var(--transition-base), box-shadow var(--transition-base);
    height: 100%;
  }
  
  .post-card:hover {
    transform: translateY(-3px);
    box-shadow: var(--shadow-md);
  }
  
  .post-link {
    display: flex;
    flex-direction: column;
    color: var(--color-text);
    text-decoration: none;
  }
  
  .post-thumbnail {
    width: 100%;
    aspect-ratio: 16 / 9;
    background-color: var(--color-bg);
    overflow: hidden;
  }
  
  .post-thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--transition-base);
  }
  
  .post-thumbnail-placeholder {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, var(--color-bg), var(--color-border));
  }
  
  .post-card:hover .post-thumbnail img {
    transform: scale(1.05);
  }
  
  .post-content {
    padding: var(--spacing-md);
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }
  
  .post-meta {
    margin-bottom: var(--spacing-xs);
  }
  
  .post-date {
    font-size: var(--font-size-sm);
    color: var(--color-text-light);
  }
  
  .post-title {
    font-size: var(--font-size-md);
    margin: var(--spacing-xs) 0 var(--spacing-sm) 0;
    line-height: var(--line-height-tight);
    /* 最大3行表示して、それ以上は省略 */
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
  }
  
  .post-tags {
    margin-top: auto;
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-xs);
  }
</style>
